Doctext file in Text format for ``2-matrix_divided`` function

================================================================================

Import the ``matrix_divided`` function from the ``2-matrix_divided`` module:

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

_________________________
Module documentation test

>>> len(__import__('2-matrix_divided').__doc__) > 0
True

___________________________
Function documentation test

>>> len(__import__('2-matrix_divided').matrix_divided.__doc__) > 0
True

_______________
Textcase: Normal

>>> matrix = [[3, 6, 9],[12, 15, 18]]
>>> print(matrix_divided(matrix, 3))
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

________________________
Testcase: With quotients
_
>>> matrix = [[1, 2, 3],[4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

________________________________________
Testcase: original matrix left unchanged

>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

_______________________________________
Testcase: handle floating-point numbers

>>> matrix = [[1.1, -2.2, 3.3],[4.4, 5.5, -6.6]]
>>> print(matrix_divided(matrix, 3))
[[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]

______________________________________________
Testcase: Handles Integers and floats combined

>>> matrix = [[1, -2.2, 3, 4.4, 5],[-6.6, 7.00, 8, 9.999, 10]]
>>> print(matrix_divided(matrix, 3))
[[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

________________
Testcase: Invalid Matrices

>>> matrix = "not a list"
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = None
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

_________________
Testcase: Empty list

>>> matrix = []
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will succeed.

>>> matrix = [[]]
>>> print(matrix_divided(matrix, 3))
[[]]

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

>>> matrix = [1, 2, 3]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats

The same TypeError is raised yet again if any elements in ``matrix`` are
neither ints nor floats.

>>> matrix = [[1, 2, 3],[4, "not a number", 6]]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats


Finally, all the rows in ``matrix`` must be the same size. If any rows are
of different sizes, a new TypeError is raised.

::

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Invalid Divisors
================

>>> matrix = [[1, 2, 3],[4, 5, 6]]
>>> print(matrix_divided(matrix, "not a number"))
Traceback (most recent call last):
	...
TypeError: div must be a number

>>> print(matrix_divided(matrix, None))
Traceback (most recent call last):
	...
TypeError: div must be a number

>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
	...
ZeroDivisionError: division by zero
